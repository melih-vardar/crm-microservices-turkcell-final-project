services:
  # DATABASES
  # User service database
  postgres_5433:
    image: postgres:latest
    container_name: postgres_5433
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user
    ports:
      - "5433:5432"
    networks:
      - app-network
    volumes:
      - postgres_5433_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Customer service database
  postgres_5435:
    image: postgres:latest
    container_name: postgres_5435
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: customer
    ports:
      - "5435:5432"
    networks:
      - app-network
    volumes:
      - postgres_5435_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Billing service database
  postgres_5434:
    image: postgres:latest
    container_name: postgres_5434
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: billing
    ports:
      - "5434:5432"
    networks:
      - app-network
    volumes:
      - postgres_5434_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Analytics service database
  postgres_5471:
    image: postgres:latest
    container_name: postgres_5471
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: analytics
    ports:
      - "5471:5432"
    networks:
      - app-network
    volumes:
      - postgres_5471:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - app-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # COMMUNICATIONS
  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    networks:
      - app-network
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # BASIC SERVICES
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8070:8070"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: on-failure

  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - "8888:8888"
    networks:
      - app-network
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: on-failure

  gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    container_name: gateway-server
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8070
    restart: on-failure

  # CUSTOM SERVICES
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8010:8010"
    networks:
      - app-network
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres_5433:
        condition: service_healthy
      kafka:
        condition: service_started
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_5433:5432/user
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8070
    restart: on-failure

  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    container_name: customer-service
    ports:
      - "8020:8020"
    networks:
      - app-network
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres_5434:
        condition: service_healthy
      kafka:
        condition: service_started
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_5434:5432/customer
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8070
    restart: on-failure

  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    container_name: billing-service
    ports:
      - "8050:8050"
    networks:
      - app-network
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres_5434:
        condition: service_healthy
      kafka:
        condition: service_started
      user-service:
        condition: service_started
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_5434:5432/billing
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8070
    restart: on-failure

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    ports:
      - "8071:8071"
    networks:
      - app-network
    environment:
      - CONFIGURL=http://config-server:8070
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - SPRING_APPLICATION_NAME=analyticsservice
    depends_on:
      kafka:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres_5471:
        condition: service_healthy
    restart: on-failure

networks:
  app-network:
    driver: bridge
volumes:
  postgres_5433_data:
  postgres_5434_data:
  postgres_5435_data:
  postgres_5471:
  grafana_data:
  prometheus_data:
