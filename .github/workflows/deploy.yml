name: Build and Deploy to AWS EKS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  EKS_CLUSTER_NAME: crm-cluster

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            config-server:
              - 'config-server/**'
            discovery-server:
              - 'discovery-server/**'
            gateway-server:
              - 'gateway-server/**'
            user-service:
              - 'user-service/**'
            customer-service:
              - 'customer-service/**'
            billing-service:
              - 'billing-service/**'
            analytics-service:
              - 'analytics-service/**'
            contract-service:
              - 'contract-service/**'
            plan-service:
              - 'plan-service/**'
            notification-service:
              - 'notification-service/**'
            customer-support-service:
              - 'customer-support-service/**'
            kubernetes:
              - 'k8s/**'

      - name: Create matrix
        id: create-matrix
        run: |
          CHANGES=$(echo '${{ toJSON(steps.filter.outputs) }}')
          SERVICES=$(echo $CHANGES | jq -c '[keys[] | select(. != "kubernetes" && . != "all" && . != "all_count" && ${CHANGES}[.] == "true")]')
          echo "Changes detected: $SERVICES"
          echo "changes=$SERVICES" >> $GITHUB_OUTPUT

  build:
    name: Build and push images
    needs: changes
    if: needs.changes.outputs.matrix != '[]' && needs.changes.outputs.matrix != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"
          cache: maven

      - name: Echo service name
        run: echo "Building service ${{ matrix.service }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache,mode=max

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: always() && needs.changes.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Replace Docker username in manifests
        run: |
          find ./k8s -type f -name "*.yaml" -exec sed -i "s/\${DOCKERHUB_USERNAME}/${{ secrets.DOCKERHUB_USERNAME }}/g" {} \;

      - name: Deploy infrastructure
        run: |
          kubectl apply -f k8s/00-namespace.yaml

          # ConfigMaps
          kubectl apply -f k8s/01-configmaps.yaml
          kubectl apply -f k8s/07-config-maps.yaml

          # Storage
          kubectl apply -f k8s/aws-ebs-sc.yaml
          kubectl apply -f k8s/02-storage.yaml

          # Databases and dependencies
          kubectl apply -f k8s/03-databases.yaml
          kubectl apply -f k8s/04-kafka.yaml
          kubectl apply -f k8s/05-monitoring.yaml

          # LoadBalancer services
          kubectl apply -f k8s/grafana-lb.yaml
          kubectl apply -f k8s/discovery-server-lb.yaml

          echo "Infrastructure deployed"

      - name: Wait for infrastructure
        run: |
          echo "Waiting for infrastructure to be ready..."
          kubectl -n crm-system wait --for=condition=ready pod -l app=postgres-user --timeout=120s || true
          kubectl -n crm-system wait --for=condition=ready pod -l app=mongodb --timeout=120s || true
          kubectl -n crm-system wait --for=condition=ready pod -l app=redis --timeout=120s || true
          kubectl -n crm-system wait --for=condition=ready pod -l app=kafka --timeout=120s || true
          sleep 30

      - name: Deploy core services
        run: |
          kubectl apply -f k8s/06-core-services.yaml
          echo "Core services deployed"

      - name: Wait for core services
        run: |
          echo "Waiting for core services to be ready..."
          kubectl -n crm-system wait --for=condition=ready pod -l app=config-server --timeout=120s || true
          kubectl -n crm-system wait --for=condition=ready pod -l app=discovery-server --timeout=120s || true
          kubectl -n crm-system wait --for=condition=ready pod -l app=gateway-server --timeout=120s || true
          sleep 30

      - name: Deploy microservices
        run: |
          kubectl apply -f k8s/08-microservices.yaml
          echo "Microservices deployed"

      - name: Verify deployment
        run: |
          kubectl get all -n crm-system

          # Get access URLs
          GATEWAY_URL=$(kubectl get svc gateway-server -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")
          GRAFANA_URL=$(kubectl get svc grafana-lb -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")
          DISCOVERY_URL=$(kubectl get svc discovery-server-lb -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")

          echo "===== Access Information ====="
          echo "API Gateway: http://$GATEWAY_URL"
          echo "Grafana: http://$GRAFANA_URL"
          echo "Eureka Discovery: http://$DISCOVERY_URL:8888"
          echo "============================"
