name: Build and Deploy to AWS EKS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: changes
        run: |
          # Check if this is the first commit
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            # Not the first commit, can compare with previous
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            # First commit, list all files
            CHANGED_FILES=$(git ls-tree --name-only -r HEAD)
          fi
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Detect changed services
          declare -a SERVICES=()
          for SERVICE in config-server discovery-server gateway-server user-service customer-service billing-service analytics-service contract-service plan-service notification-service customer-support-service; do
            if echo "$CHANGED_FILES" | grep -q "^$SERVICE/"; then
              SERVICES+=("$SERVICE")
              echo "Service has changes: $SERVICE"
            fi
          done

          # Check for k8s config changes
          K8S_CHANGES=false
          if echo "$CHANGED_FILES" | grep -q "^k8s/"; then
            K8S_CHANGES=true
            echo "Kubernetes configurations changed"
          fi

          # Create JSON array of services
          JSON_ARRAY=$(printf '"%s",' "${SERVICES[@]}" | sed 's/,$//')
          echo "matrix=[${JSON_ARRAY}]" >> $GITHUB_OUTPUT
          echo "k8s_changed=$K8S_CHANGES" >> $GITHUB_OUTPUT

      - name: Set matrix
        id: set-matrix
        run: |
          # Get the JSON array from previous step
          SERVICES_JSON="${{ steps.changes.outputs.matrix }}"
          echo "Services to build: $SERVICES_JSON"

          # Create valid matrix JSON
          if [ -z "$SERVICES_JSON" ] || [ "$SERVICES_JSON" = "[]" ]; then
            echo "matrix={\"service\":[]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"service\":$SERVICES_JSON}" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: detect-changes
    if: ${{ toJson(fromJson(needs.detect-changes.outputs.matrix).service) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.sha }}

  deploy-to-kubernetes:
    needs: [detect-changes, build-and-push]
    if: always() && (needs.detect-changes.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name crm-cluster --region eu-central-1

      - name: Update Kubernetes manifests
        run: |
          find ./k8s -type f -name "*.yaml" -exec sed -i "s/\${DOCKERHUB_USERNAME}/${{ secrets.DOCKERHUB_USERNAME }}/g" {} \;

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/00-namespace.yaml
          kubectl apply -f k8s/01-configmaps.yaml

          # Apply Storage Class first
          kubectl apply -f k8s/aws-ebs-sc.yaml

          # Apply storage configuration (PVCs)
          kubectl apply -f k8s/02-storage.yaml

          kubectl apply -f k8s/03-databases.yaml
          kubectl apply -f k8s/04-kafka.yaml
          kubectl apply -f k8s/05-monitoring.yaml
          kubectl apply -f k8s/grafana-lb.yaml
          kubectl apply -f k8s/discovery-server-lb.yaml
          kubectl apply -f k8s/07-config-maps.yaml

          # Wait for infrastructure to be ready
          echo "Waiting for infrastructure components to be ready..."
          sleep 60

          # Deploy core services
          kubectl apply -f k8s/06-core-services.yaml

          # Wait for core services to be ready
          echo "Waiting for core services to be ready..."
          sleep 90

          # Deploy microservices
          kubectl apply -f k8s/08-microservices.yaml

          echo "Deployment completed"

      - name: Verify deployment
        run: |
          kubectl get all -n crm-system
          echo "Access your application at http://$(kubectl get svc gateway-server -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
          echo "Access Grafana at http://$(kubectl get svc grafana-lb -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
          echo "Access Discovery Server at http://$(kubectl get svc discovery-server-lb -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'):8888"
