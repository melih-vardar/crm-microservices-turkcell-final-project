name: Build and Deploy to AWS EKS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            config-server/**
            discovery-server/**
            gateway-server/**
            user-service/**
            customer-service/**
            billing-service/**
            analytics-service/**
            contract-service/**
            plan-service/**
            notification-service/**
            customer-support-service/**

      - name: Set matrix
        id: set-matrix
        run: |
          changed_services=()

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            service=$(echo $file | cut -d'/' -f1)
            if [[ " ${changed_services[@]} " =~ " ${service} " ]]; then
              continue
            fi
            
            # Check if the service is one of our microservices
            if [[ -d "$service" && ( "$service" == "config-server" || 
                "$service" == "discovery-server" || 
                "$service" == "gateway-server" || 
                "$service" == "user-service" || 
                "$service" == "customer-service" || 
                "$service" == "billing-service" || 
                "$service" == "analytics-service" || 
                "$service" == "contract-service" || 
                "$service" == "plan-service" || 
                "$service" == "notification-service" || 
                "$service" == "customer-support-service" ) ]]; then
              changed_services+=("$service")
            fi
          done

          # If no services changed, build all services (for workflow_dispatch)
          if [ ${#changed_services[@]} -eq 0 ]; then
            changed_services=(
              "config-server"
              "discovery-server"
              "gateway-server"
              "user-service"
              "customer-service"
              "billing-service"
              "analytics-service"
              "contract-service"
              "plan-service"
              "notification-service"
              "customer-support-service"
            )
          fi

          # Convert to JSON array for the matrix
          matrix=$(printf '"%s",' "${changed_services[@]}" | sed 's/,$//')
          echo "matrix={\"service\":[$matrix]}" >> $GITHUB_OUTPUT
          echo "Building services: $matrix"

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.matrix != '{"service":[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.sha }}

  update-k8s-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Kubernetes manifests with SHA tag
        run: |
          # Replace ${DOCKERHUB_USERNAME} with actual username
          find ./k8s -type f -name "*.yaml" -exec sed -i "s/\${DOCKERHUB_USERNAME}/${{ secrets.DOCKERHUB_USERNAME }}/g" {} \;

          # Replace ${IMAGE_TAG} with SHA
          find ./k8s -type f -name "*.yaml" -exec sed -i "s/\${IMAGE_TAG}/${{ github.sha }}/g" {} \;

  deploy-to-kubernetes:
    needs: update-k8s-manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name crm-cluster --region eu-central-1

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/00-namespace.yaml
          kubectl apply -f k8s/01-configmaps.yaml

          # Apply Storage Class first
          kubectl apply -f k8s/aws-ebs-sc.yaml

          # Apply storage configuration (PVCs)
          kubectl apply -f k8s/02-storage.yaml

          kubectl apply -f k8s/03-databases.yaml
          kubectl apply -f k8s/04-kafka.yaml
          kubectl apply -f k8s/05-monitoring.yaml
          kubectl apply -f k8s/grafana-lb.yaml
          kubectl apply -f k8s/discovery-server-lb.yaml
          kubectl apply -f k8s/07-config-maps.yaml

          # Wait for infrastructure to be ready
          echo "Waiting for infrastructure components to be ready..."

          # Deploy core services
          kubectl apply -f k8s/06-core-services.yaml

          # Wait for core services to be ready
          echo "Waiting for core services to be ready..."

          # Deploy microservices
          kubectl apply -f k8s/08-microservices.yaml

          echo "Deployment completed"

      - name: Verify deployment
        run: |
          kubectl get all -n crm-system
          echo "Access your application at http://$(kubectl get svc gateway-server -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
          echo "Access Grafana at http://$(kubectl get svc grafana-lb -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
          echo "Access Discovery Server at http://$(kubectl get svc discovery-server-lb -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'):8888"
