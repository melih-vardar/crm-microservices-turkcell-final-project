name: Build and Deploy to AWS EKS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            config-server,
            discovery-server,
            gateway-server,
            user-service,
            customer-service,
            billing-service,
            analytics-service,
            contract-service,
            plan-service,
            notification-service,
            customer-support-service,
          ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.sha }}

  deploy-to-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name crm-cluster --region eu-central-1

      - name: Update Kubernetes manifests
        run: |
          find ./k8s -type f -name "*.yaml" -exec sed -i "s/\${DOCKERHUB_USERNAME}/${{ secrets.DOCKERHUB_USERNAME }}/g" {} \;

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/00-namespace.yaml
          kubectl apply -f k8s/01-configmaps.yaml

          # Apply Storage Class first
          kubectl apply -f k8s/aws-ebs-sc.yaml

          # Clean up existing PVCs to avoid conflicts
          echo "Cleaning up existing PVCs..."
          kubectl delete pvc --all -n crm-system --ignore-not-found=true

          # Clean up any manual PVs if they exist
          echo "Cleaning up existing manual PVs..."
          kubectl delete pv postgres-user-pv postgres-customer-pv postgres-billing-pv postgres-analytics-pv postgres-contract-pv postgres-plan-pv mongodb-pv redis-pv prometheus-pv grafana-pv --ignore-not-found=true

          # Apply new PVCs
          echo "Creating new PVCs with EBS storage class..."
          kubectl apply -f k8s/02-storage.yaml

          kubectl apply -f k8s/03-databases.yaml
          kubectl apply -f k8s/04-kafka.yaml
          kubectl apply -f k8s/05-monitoring.yaml
          kubectl apply -f k8s/07-config-maps.yaml

          # Wait for infrastructure to be ready
          echo "Waiting for infrastructure components to be ready..."
          sleep 60

          # Deploy core services
          kubectl apply -f k8s/06-core-services.yaml

          # Wait for core services to be ready
          echo "Waiting for core services to be ready..."
          sleep 90

          # Deploy microservices
          kubectl apply -f k8s/08-microservices.yaml

          echo "Deployment completed"

      - name: Verify deployment
        run: |
          kubectl get all -n crm-system
          echo "Access your application at http://$(kubectl get svc gateway-server -n crm-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
