services:
  # DATABASES
  # User service database
  postgres_5433:
    image: postgres:latest
    container_name: postgres_5433
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user
    ports:
      - "5433:5432"
    volumes:
      - postgres_5433_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Customer service database
  postgres_5435:
    image: postgres:latest
    container_name: postgres_5435
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: customer
    ports:
      - "5435:5432"
    volumes:
      - postgres_5435_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Billing service database
  postgres_5434:
    image: postgres:latest
    container_name: postgres_5434
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: billing
    ports:
      - "5434:5432"
    volumes:
      - postgres_5434_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Contract service database
  postgres_5436:
    image: postgres:latest
    container_name: postgres_5436
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: contract
    ports:
      - "5436:5432"
    networks:
      - app-network
    volumes:
      - postgres_5436_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Plan service database
  postgres_5437:
    image: postgres:latest
    container_name: postgres_5437
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: plan
    ports:
      - "5437:5432"
    volumes:
      - postgres_5437_data:/var/lib/postgresql/data
    networks:
      - app-network

  # MongoDB for Customer Support Service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  # COMMUNICATIONS
  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
  # BASIC SERVICES
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8070:8070"
    networks:
      - app-network

  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - "8888:8888"
    networks:
      - app-network
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - CONFIGURL=http://config-server:8070
    depends_on:
      - config-server

  gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    container_name: gateway-server
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - discovery-server
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - CONFIGURL=http://config-server:8070

  # Add missing services for development
  contract-service:
    build:
      context: ./contract-service
      dockerfile: Dockerfile
    container_name: contract-service
    ports:
      - "8030:8030"
    networks:
      - app-network
    depends_on:
      - discovery-server
      - config-server
      - postgres_5436
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_5436:5432/contract
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - CONFIGURL=http://config-server:8070
      - SPRING_APPLICATION_NAME=contractservice

  customer-support-service:
    build:
      context: ./customer-support-service
      dockerfile: Dockerfile
    container_name: customer-support-service
    ports:
      - "8070:8070"
    networks:
      - app-network
    depends_on:
      - discovery-server
      - config-server
      - mongodb
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_MONGODB_URI=mongodb://mongodb:27017/customerSupportdb
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - CONFIGURL=http://config-server:8070
      - SPRING_APPLICATION_NAME=customersupportservice

  plan-service:
    build:
      context: ./plan-service
      dockerfile: Dockerfile
    container_name: plan-service
    ports:
      - "8040:8040"
    networks:
      - app-network
    depends_on:
      - discovery-server
      - config-server
      - postgres_5437
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_5437:5432/plan
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - CONFIGURL=http://config-server:8070
      - SPRING_APPLICATION_NAME=planservice

networks:
  app-network:
    driver: bridge

volumes:
  postgres_5433_data:
  postgres_5434_data:
  postgres_5435_data:
  postgres_5436_data:
  postgres_5437_data:
  mongodb_data:
